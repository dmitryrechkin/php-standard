<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="StablePHPStandard">
	<description>Stable PHP coding standard using only built-in phpcs rules - no external dependencies</description>

	<arg name="tab-width" value="4"/>

	<!-- Base PSR-12 standard with tab indentation override -->
	<rule ref="PSR12">
		<!-- Override tab indentation preference - use tabs instead of spaces -->
		<exclude name="Generic.WhiteSpace.DisallowTabIndent"/>
		<!-- Allow side effects for flexibility in some files -->
		<exclude name="PSR1.Files.SideEffects"/>
	</rule>

	<!-- Enforce tab indentation (4 spaces equivalent) -->
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>
	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="indent" value="4"/>
			<property name="tabIndent" value="true"/>
		</properties>
	</rule>

	<!-- Array formatting rules -->
	<rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
	<rule ref="Generic.Arrays.ArrayIndent"/>
	<rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
	<rule ref="Squiz.Arrays.ArrayDeclaration">
		<!-- Only enforce specific sub-rules to avoid conflicts -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/>
		<exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed"/>
		<exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned"/>
		<exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/>
		<exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"/>
		<exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/>
	</rule>

	<!-- String formatting -->
	<rule ref="Squiz.Strings.DoubleQuoteUsage">
		<exclude name="Squiz.Strings.DoubleQuoteUsage.ContainsVar"/>
	</rule>

	<!-- Operator spacing -->
	<rule ref="Squiz.WhiteSpace.OperatorSpacing">
		<properties>
			<property name="ignoreNewlines" value="true"/>
			<property name="ignoreSpacingBeforeAssignments" value="false"/>
		</properties>
	</rule>

	<!-- Function and method documentation -->
	<rule ref="Squiz.Commenting.FunctionComment">
		<properties>
			<property name="skipIfInheritdoc" value="true"/>
		</properties>
		<!-- Exclude overly strict formatting rules while keeping core documentation -->
		<exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/>
		<exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/>
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/>
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/>
		<exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop"/>
		<exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>
		<exclude name="Squiz.Commenting.FunctionComment.ParamNameNoMatch"/>
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName"/>
		<exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/>
		<exclude name="Squiz.Commenting.FunctionComment.ThrowsNotCapital"/>
	</rule>

	<!-- Class documentation -->
	<rule ref="Squiz.Commenting.ClassComment">
		<exclude name="Squiz.Commenting.ClassComment.Missing"/>
		<exclude name="Squiz.Commenting.ClassComment.SpacingAfter"/>
		<exclude name="Squiz.Commenting.ClassComment.TagNotAllowed"/>
	</rule>

	<!-- Variable and unused code detection using Generic rules -->
	<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
	<rule ref="Generic.CodeAnalysis.EmptyStatement"/>
	<rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
	<rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
	<rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
	<rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>

	<!-- Namespace and Use statement formatting with Generic/Squiz rules -->
	<rule ref="PSR2.Namespaces.NamespaceDeclaration"/>
	<rule ref="PSR2.Namespaces.UseDeclaration"/>
	<rule ref="Generic.PHP.LowerCaseKeyword"/>
	<rule ref="Generic.PHP.LowerCaseConstant"/>
	<rule ref="Generic.PHP.LowerCaseType"/>

	<!-- Control structure formatting (PSR-12 compatible) -->
	<rule ref="Generic.ControlStructures.InlineControlStructure"/>
	<rule ref="Squiz.ControlStructures.ControlSignature"/>
	<!-- Allow elseif (PSR-12 standard) instead of forcing else if -->
	<rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
	<rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
	<rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>

	<!-- Function and method formatting -->
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
	<!-- Remove problematic brace rule that conflicts with PSR-12 -->
	<rule ref="Squiz.Functions.FunctionDeclaration"/>
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing"/>
	<rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

	<!-- Class formatting -->
	<rule ref="Generic.Classes.DuplicateClassName"/>
	<rule ref="Squiz.Classes.ClassDeclaration"/>
	<rule ref="Squiz.Classes.LowercaseClassKeywords"/>
	<rule ref="Squiz.Classes.ValidClassName"/>

	<!-- Whitespace and formatting -->
	<rule ref="Generic.Formatting.DisallowMultipleStatements"/>
	<rule ref="Generic.Formatting.SpaceAfterCast"/>
	<rule ref="Generic.Formatting.SpaceAfterNot">
		<properties>
			<property name="spacing" value="0"/>
		</properties>
	</rule>
	<rule ref="Squiz.WhiteSpace.CastSpacing"/>
	<rule ref="Generic.WhiteSpace.LanguageConstructSpacing"/>
	<rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
	<rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

	<!-- PHP specific rules -->
	<rule ref="Generic.PHP.DeprecatedFunctions"/>
	<rule ref="Generic.PHP.DisallowAlternativePHPTags"/>
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
	<rule ref="Generic.PHP.ForbiddenFunctions"/>
	<!-- Disable NoSilencedErrors as it's often needed in WordPress -->
	<!-- <rule ref="Generic.PHP.NoSilencedErrors"/> -->

	<!-- File formatting -->
	<rule ref="Generic.Files.ByteOrderMark"/>
	<rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="150"/>
			<property name="absoluteLineLimit" value="200"/>
		</properties>
		<!-- Exclude templates from line length checks -->
		<exclude-pattern>*/templates/*</exclude-pattern>
	</rule>
	<rule ref="Generic.Files.LineEndings">
		<properties>
			<property name="eolChar" value="\n"/>
		</properties>
	</rule>
	<rule ref="Generic.Files.EndFileNewline"/>

	<!-- Security rules (relaxed for practical development) -->
	<rule ref="Generic.Files.InlineHTML"/>
	<rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
	<!-- Allow common debugging functions -->
	<!-- <rule ref="Squiz.PHP.DiscouragedFunctions"/> -->
	<rule ref="Squiz.PHP.Eval"/>
	<rule ref="Squiz.PHP.GlobalKeyword"/>

	<!-- Additional stability rules -->
	<rule ref="Squiz.Scope.MemberVarScope"/>
	<rule ref="Squiz.Scope.MethodScope"/>
	<rule ref="Squiz.Scope.StaticThisUsage"/>

	<!-- Exclude vendor directories and common problematic patterns -->
	<exclude-pattern>*/vendor/*</exclude-pattern>
	<exclude-pattern>*/node_modules/*</exclude-pattern>
	<exclude-pattern>*.min.*</exclude-pattern>
	<exclude-pattern>*/cache/*</exclude-pattern>
	<exclude-pattern>*/tmp/*</exclude-pattern>
	<exclude-pattern>*/temp/*</exclude-pattern>
</ruleset>
